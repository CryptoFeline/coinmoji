import { Handler } from '@netlify/functions';// Server-side WebM creation using FFmpeg with VP9 alpha supportexport const handler: Handler = async (event) => {  console.log('üé¨ Server-side WebM creation function called');    // CORS headers  const headers = {    'Access-Control-Allow-Origin': '*',    'Access-Control-Allow-Headers': 'Content-Type',    'Access-Control-Allow-Methods': 'POST, OPTIONS',    'Content-Type': 'application/json',  };  if (event.httpMethod === 'OPTIONS') {    return {      statusCode: 200,      headers,      body: '',    };  }  if (event.httpMethod !== 'POST') {    return {      statusCode: 405,      headers,      body: JSON.stringify({ error: 'Method not allowed' }),    };  }  try {    // Parse the request body    const { frames_base64, settings } = JSON.parse(event.body || '{}');        if (!frames_base64 || !Array.isArray(frames_base64) || frames_base64.length === 0) {      return {        statusCode: 400,        headers,        body: JSON.stringify({ error: 'Missing or invalid frames_base64 array' }),      };    }    if (!settings || !settings.fps || !settings.size) {      return {        statusCode: 400,        headers,        body: JSON.stringify({ error: 'Missing settings (fps, size required)' }),      };    }    console.log(`üìä Processing ${frames_base64.length} frames with settings:`, settings);    // Try FFmpeg approach first for real WebM creation    try {      console.log('üé¨ Attempting FFmpeg server-side WebM creation...');            const fs = require('fs').promises;      const path = require('path');      const { spawn } = require('child_process');      const os = require('os');            // Create temporary directory for frame processing      const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'webm-'));      console.log(`üìÅ Created temp directory: ${tempDir}`);            try {        // Save frames as individual PNG files        console.log(`üíæ Saving ${frames_base64.length} frames to disk...`);        for (let i = 0; i < frames_base64.length; i++) {          const frameBuffer = Buffer.from(frames_base64[i], 'base64');          const framePath = path.join(tempDir, `frame_${String(i).padStart(4, '0')}.png`);          await fs.writeFile(framePath, frameBuffer);                    if (i === 0 || i === frames_base64.length - 1 || i % 10 === 0) {            console.log(`üíæ Saved frame ${i + 1}/${frames_base64.length}: ${frameBuffer.length} bytes`);          }        }                // Use FFmpeg to create WebM with transparency        const outputPath = path.join(tempDir, 'output.webm');        const inputPattern = path.join(tempDir, 'frame_%04d.png');                console.log('üé¨ Running FFmpeg to create transparent WebM...');                // FFmpeg command for transparent WebM with VP9        const ffmpegArgs = [          '-framerate', settings.fps.toString(),          '-i', inputPattern,          '-c:v', 'libvpx-vp9',          '-pix_fmt', 'yuva420p', // Enable alpha channel          '-auto-alt-ref', '0',          '-lag-in-frames', '0',          '-b:v', '200k', // 200kbps bitrate for small file size          '-crf', '30', // Good quality/size balance          '-t', settings.duration.toString(),          '-y', // Overwrite output file          outputPath        ];                console.log('üìã FFmpeg command:', ['ffmpeg', ...ffmpegArgs].join(' '));                const ffmpegResult = await new Promise<{ success: boolean; error?: string }>((resolve) => {          const ffmpeg = spawn('ffmpeg', ffmpegArgs, {            stdio: ['ignore', 'pipe', 'pipe'],            cwd: tempDir          });                    let stdout = '';          let stderr = '';                    ffmpeg.stdout.on('data', (data) => {            stdout += data.toString();          });                    ffmpeg.stderr.on('data', (data) => {            stderr += data.toString();          });                    ffmpeg.on('close', (code) => {            if (code === 0) {              console.log('‚úÖ FFmpeg completed successfully');              resolve({ success: true });            } else {              console.log('‚ùå FFmpeg failed with code:', code);              console.log('üìÑ FFmpeg stderr:', stderr);              resolve({ success: false, error: `FFmpeg exit code ${code}: ${stderr}` });            }          });                    ffmpeg.on('error', (error) => {            console.log('‚ùå FFmpeg spawn error:', error);            resolve({ success: false, error: `FFmpeg spawn error: ${error.message}` });          });        });                if (!ffmpegResult.success) {          throw new Error(ffmpegResult.error || 'FFmpeg failed');        }                // Read the generated WebM file        const webmBuffer = await fs.readFile(outputPath);        console.log(`üìä FFmpeg WebM created: ${webmBuffer.length} bytes`);                const webmBase64 = webmBuffer.toString('base64');                // Clean up temp directory        await fs.rmdir(tempDir, { recursive: true });        console.log('üßπ Cleaned up temp directory');                return {          statusCode: 200,          headers,          body: JSON.stringify({            success: true,            webm_base64: webmBase64,            size: webmBuffer.length,            codec: 'VP9 with alpha (FFmpeg)',            transparency: true,            method: 'FFmpeg server-side with yuva420p',            mock: false,            frames_processed: frames_base64.length,            alpha_detected: true          }),        };              } catch (tempError) {        // Clean up temp directory on error        try {          await fs.rmdir(tempDir, { recursive: true });        } catch (cleanupError) {          console.log('‚ö†Ô∏è Temp cleanup failed:', cleanupError);        }        throw tempError;      }          } catch (ffmpegError) {      console.log('‚ùå FFmpeg approach failed:', ffmpegError);      console.log('üîÑ Falling back to client-side approach (no server-side WebM)...');            // Return error to force client-side webm-muxer with non-alpha codec      return {        statusCode: 500,        headers,        body: JSON.stringify({          error: 'Server-side WebM creation failed',          details: 'FFmpeg not available or failed. Use client-side approach without transparency.',          fallback_required: true,          frames_processed: frames_base64.length        }),      };    }  } catch (error) {    console.error('‚ùå Server WebM creation failed:', error);    return {      statusCode: 500,      headers,      body: JSON.stringify({         error: 'Server WebM creation failed',         details: error instanceof Error ? error.message : 'Unknown error'       }),    };  }};